From piper output, get a PDB of the complex.
complex-model.000.00.min.pdb

Ensure that this PDB has protein A bound to protein B, and either with 2
warheads bound (lig1, lig2) or CTM (lig1). Straight out of PIPER docking output
should be fine, but if you expand cluster output, those structures are just the
ligand protein. Merge with the original receptor protein to get a complex in
that case.

--------------------------------------------------

I suggest creating a separate directory for each structure to be refined with
rosetta. Then, within that directory run the following script, which strips the
ligand, runs the params generator, and then refomats the PDB to feed into
Rosetta. For this script, pass in the complex structure file, and the name(s) of
the ligand(s).
./prepare_for_rosetta.sh $complexfile $lig1 $lig2   # lig1 and lig2 are the names of the ligands. If only one, need to change the script.

The results of this will have the prefix rosetta-clean-structure.pdb

--------------------------------------------------

Rosetta needs to be recompiled with MPI in order to run in parallel.
To run a single Relax you can *amend for your system* and use the script
run_rosetta_relax_single.sh submitted in the following qsub command:

qsub -N j_NAME -cwd -q cpu ./run_rosetta_relax_single.sh structure.pdb

This contains the following command in the submission script. Make
sure you include the corrent names of the ligand parameter files. The
LD_LIBRARY_PATH you can put in your bashrc. The "-ignore_zero_occupancy false" was
imporant to not skip atoms because the PDBs out of PIPER may have charge
information in the occupancy column.

structure=rosetta-clean-complex.pdb
lig1=B23.params
lig2=RN3.params

export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/apps/Rosetta/main/source/build/external/release/linux/3.10/64/x86/gcc/4.8/default/

/opt/apps/Rosetta/main/source/bin/relax.default.linuxgccrelease -database /opt/apps/Rosetta/main/database/  -relax:constrain_relax_to_start_coords -relax:coord_constrain_sidechains -relax:ramp_constraints false -ex1 -ex2 -use_input_sc -flip_HNQ -ignore_zero_occupancy false -no_optH false -s $structure -extra_res_fa $lig1  >& rosetta_${structure%%.pdb*}.log



You can add the "-nstruct X" flag added for multiple structures. Right now these
will be run in serial. I will update this with information on how to trivially
parallelize this because the seed may need to be managed. TBD.

--------------------------------------------------

The output of rosetta will be PDBS with suffix _0001 ,_0002, _0003.
The scores are stored within these PDBs, if you look for the line "pose". the
components are labeled in the lines preceding, and below are the per-residue
components.  The scores are also in a score.sc file.

within the PDB:

#BEGIN_POSE_ENERGIES_TABLE rosetta-clean-complex-model.000.00.min_0001.pdb
label fa_atr fa_rep fa_sol fa_intra_rep fa_intra_sol_xover4 lk_ball_wtd fa_elec pro_close hbond_sr_bb hbond_lr_bb hbond_bb_sc hbond_sc dslf_fa13 coordinate_constraint omega fa_dun p_aa_pp yhh_planarity ref rama_prepro total
weights 1 0.55 1 0.005 1 1 1 1.25 1 1 1 1 1.25 0.5 0.4 0.7 0.6 0.625 1 0.45 NA
pose -1678.49 247.78 1092.21 3.48172 66.2426 -9.43716 -521.768 3.52829 -105.44 -39.1262 -54.451 -66.038 0 137.689 97.7327 523.049 -43.4173 0.71912 53.0585 36.1383 -256.535


see my presentaiton or this reference for summary of scores and weights:
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5717763/

--------------------------------------------------

For protein-protein complexes, interaction energies are more useful for
analysis. To compute these, I have these scripts:


rosetta_compute_interaction_energy.sh $file     # pass in the *_0001.pdb PDB.
run_rosetta_score_only.sh complex.pdb           # This script is used by the rosetta_compute_interaction_energy.sh script and just does scoring.
get_all_min_rosetta_vals.py                     # python script to parse all the component scores and get output.txt files with interaction energy scores of interest.

The python script needs to be run in a directory with subdirectories named after
the complexmodels:

complex-model.000.00.min/ complex-model.000.01.min/ complex-model.000.02.min/

Where within each of these directories the rosetta_compute_interaction_energy.sh has been run.


The output of these are text files:
rosetta_fa_atr.summary.txt
rosetta_fa_dun.summary.txt
rosetta_fa_elec.summary.txt
rosetta_fa_rep.summary.txt
rosetta_fa_sol.summary.txt
rosetta_hbond_bb_sc.summary.txt
rosetta_hbond_lr_bb.summary.txt
rosetta_hbond_sc.summary.txt
rosetta_lk_ball_wtd.summary.txt
rosetta_total_score.summary.txt
